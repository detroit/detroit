--- !ruby/object:RDoc::RI::ClassDescription 
attributes: 
- !ruby/object:RDoc::RI::Attribute 
  comment: 
  - !ruby/struct:RDoc::Markup::Flow::P 
    body: Paths to specifically exclude.
  name: exclude
  rw: RW
- !ruby/object:RDoc::RI::Attribute 
  comment: 
  - !ruby/struct:RDoc::Markup::Flow::P 
    body: Additional options passed to the yardoc command.
  name: extra
  rw: RW
- !ruby/object:RDoc::RI::Attribute 
  comment: 
  - !ruby/struct:RDoc::Markup::Flow::P 
    body: Which files to document.
  name: files
  rw: RW
- !ruby/object:RDoc::RI::Attribute 
  comment: 
  - !ruby/struct:RDoc::Markup::Flow::P 
    body: Where to save yard files (doc/yard).
  name: output
  rw: RW
- !ruby/object:RDoc::RI::Attribute 
  comment: 
  - !ruby/struct:RDoc::Markup::Flow::P 
    body: Main file. This can be file pattern. (README{,.txt})
  name: readme
  rw: RW
- !ruby/object:RDoc::RI::Attribute 
  comment: 
  - !ruby/struct:RDoc::Markup::Flow::P 
    body: Template to use (defaults to ENV['RDOC_TEMPLATE'] or 'html')
  name: template
  rw: RW
- !ruby/object:RDoc::RI::Attribute 
  comment: 
  - !ruby/struct:RDoc::Markup::Flow::P 
    body: Title of documents. Defaults to general metadata title field.
  name: title
  rw: RW
class_methods: []

comment: 
- !ruby/struct:RDoc::Markup::Flow::P 
  body: Yard documentation plugin generates docs for your project.
- !ruby/struct:RDoc::Markup::Flow::P 
  body: By default it generates the yard documentaiton at doc/yard, unless an 'yard' directory exists in the project's root directory, in which case the documentation will be stored there.
- !ruby/struct:RDoc::Markup::Flow::P 
  body: "This plugin provides the following cycle-phases:"
- !ruby/struct:RDoc::Markup::Flow::VERB 
  body: "  main:document  - generate yardocs\n  main:reset     - mark yardocs out-of-date\n  main:clean     - remove yardocs\n\n  site:document  - generate yardocs\n  site:reset     - mark yardocs out-of-date\n  site:clean     - remove yardocs\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  body: Yard service will be available automatically if the project has a <tt>doc/yard</tt> directory.
- !ruby/struct:RDoc::Markup::Flow::RULE 
  width: 
- !ruby/struct:RDoc::Markup::Flow::P 
  body: Yard documentation plugin generates docs for your project.
- !ruby/struct:RDoc::Markup::Flow::P 
  body: By default it generates the yard documentaiton at doc/yard, unless an 'yard' directory exists in the project's root directory, in which case the documentation will be stored there.
- !ruby/struct:RDoc::Markup::Flow::P 
  body: "This plugin provides the following cycle-phases:"
- !ruby/struct:RDoc::Markup::Flow::VERB 
  body: "  main:document  - generate yardocs\n  main:reset     - mark yardocs out-of-date\n  main:clean     - remove yardocs\n\n  site:document  - generate yardocs\n  site:reset     - mark yardocs out-of-date\n  site:clean     - remove yardocs\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  body: Yard service will be available automatically if the project has a <tt>doc/yard</tt> directory.
- !ruby/struct:RDoc::Markup::Flow::RULE 
  width: 
- !ruby/struct:RDoc::Markup::Flow::P 
  body: Yard documentation plugin generates docs for your project.
- !ruby/struct:RDoc::Markup::Flow::P 
  body: By default it generates the yard documentaiton at doc/yard, unless an 'yard' directory exists in the project's root directory, in which case the documentation will be stored there.
- !ruby/struct:RDoc::Markup::Flow::P 
  body: "This plugin provides the following cycle-phases:"
- !ruby/struct:RDoc::Markup::Flow::VERB 
  body: "  main:document  - generate yardocs\n  main:reset     - mark yardocs out-of-date\n  main:clean     - remove yardocs\n\n  site:document  - generate yardocs\n  site:reset     - mark yardocs out-of-date\n  site:clean     - remove yardocs\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  body: Yard service will be available automatically if the project has a <tt>doc/yard</tt> directory.
constants: 
- !ruby/object:RDoc::RI::Constant 
  comment: 
  - !ruby/struct:RDoc::Markup::Flow::P 
    body: Deafult extra options to add to yardoc call.
  name: DEFAULT_EXTRA
  value: "''"
- !ruby/object:RDoc::RI::Constant 
  comment: 
  - !ruby/struct:RDoc::Markup::Flow::P 
    body: Default location to store yard documentation files.
  name: DEFAULT_OUTPUT
  value: "\"doc/yard\""
- !ruby/object:RDoc::RI::Constant 
  comment: 
  - !ruby/struct:RDoc::Markup::Flow::P 
    body: Locations to check for existance in deciding where to store yard documentation.
  name: DEFAULT_OUTPUT_MATCH
  value: "\"{yard,doc/yard}\""
- !ruby/object:RDoc::RI::Constant 
  comment: 
  - !ruby/struct:RDoc::Markup::Flow::P 
    body: Default main file.
  name: DEFAULT_README
  value: "\"README\""
- !ruby/object:RDoc::RI::Constant 
  comment: 
  - !ruby/struct:RDoc::Markup::Flow::P 
    body: Default template to use.
  name: DEFAULT_TEMPLATE
  value: "\"default\""
full_name: Syckle::Plugins::Yard
includes: []

instance_methods: 
- !ruby/object:RDoc::RI::MethodSummary 
  name: clean
- !ruby/object:RDoc::RI::MethodSummary 
  name: document
- !ruby/object:RDoc::RI::MethodSummary 
  name: initialize_defaults
- !ruby/object:RDoc::RI::MethodSummary 
  name: yard_target
name: Yard
superclass: Service
