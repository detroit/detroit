--- !ruby/object:RDoc::RI::ClassDescription 
attributes: 
- !ruby/object:RDoc::RI::Attribute 
<<<<<<< HEAD:ri/Syckle/Service/cdesc-Service.yaml
  comment: []

  name: active
  rw: RW
- !ruby/object:RDoc::RI::Attribute 
=======
>>>>>>> 5decbf1bc6cee8b7cedf216152e8021212909f00:ri/Syckle/Service/cdesc-Service.yaml
  comment: 
  - !ruby/struct:RDoc::Markup::Flow::P 
    body: The batch context.
  name: context
  rw: R
- !ruby/object:RDoc::RI::Attribute 
  comment: 
  name: key
  rw: R
- !ruby/object:RDoc::RI::Attribute 
<<<<<<< HEAD:ri/Syckle/Service/cdesc-Service.yaml
  comment: 
  name: options
  rw: R
- !ruby/object:RDoc::RI::Attribute 
=======
>>>>>>> 5decbf1bc6cee8b7cedf216152e8021212909f00:ri/Syckle/Service/cdesc-Service.yaml
  comment: []

  name: priority
  rw: RW
- !ruby/object:RDoc::RI::Attribute 
  comment: []

  name: project
  rw: R
class_methods: 
- !ruby/object:RDoc::RI::MethodSummary 
  name: aftcycle
- !ruby/object:RDoc::RI::MethodSummary 
  name: autorun
- !ruby/object:RDoc::RI::MethodSummary 
  name: autorun?
- !ruby/object:RDoc::RI::MethodSummary 
  name: available
- !ruby/object:RDoc::RI::MethodSummary 
  name: available?
- !ruby/object:RDoc::RI::MethodSummary 
  name: cycle
- !ruby/object:RDoc::RI::MethodSummary 
  name: factory
- !ruby/object:RDoc::RI::MethodSummary 
  name: inherited
- !ruby/object:RDoc::RI::MethodSummary 
  name: init
- !ruby/object:RDoc::RI::MethodSummary 
  name: new
- !ruby/object:RDoc::RI::MethodSummary 
  name: precycle
- !ruby/object:RDoc::RI::MethodSummary 
  name: registry
comment: 
- !ruby/struct:RDoc::Markup::Flow::H 
  level: 1
  text: Service
- !ruby/struct:RDoc::Markup::Flow::P 
  body: The plugin acts a base class for ecapsulating batch routines. This helps to keep the main batch context free of the clutter of private supporting methods.
- !ruby/struct:RDoc::Markup::Flow::P 
  body: Plugins are tightly coupled to the batch context, which allows them to call on the context easily. However this means plugins cannot be used independent of a batch context, and changes in the batch context can cause effects in plugin behvior that can be harder to track down and fix if a bug arises.
- !ruby/struct:RDoc::Markup::Flow::P 
  body: The context must be a subclass of Syckle::Script.
- !ruby/struct:RDoc::Markup::Flow::RULE 
  width: 
- !ruby/struct:RDoc::Markup::Flow::H 
  level: 1
  text: Service
- !ruby/struct:RDoc::Markup::Flow::P 
  body: The plugin acts a base class for ecapsulating batch routines. This helps to keep the main batch context free of the clutter of private supporting methods.
- !ruby/struct:RDoc::Markup::Flow::P 
  body: Plugins are tightly coupled to the batch context, which allows them to call on the context easily. However this means plugins cannot be used independent of a batch context, and changes in the batch context can cause effects in plugin behvior that can be harder to track down and fix if a bug arises.
- !ruby/struct:RDoc::Markup::Flow::P 
  body: The context must be a subclass of Syckle::Script.
constants: []

full_name: Syckle::Service
includes: []

instance_methods: 
- !ruby/object:RDoc::RI::MethodSummary 
  name: initialize_defaults
- !ruby/object:RDoc::RI::MethodSummary 
  name: inspect
- !ruby/object:RDoc::RI::MethodSummary 
  name: metadata
- !ruby/object:RDoc::RI::MethodSummary 
  name: method_missing
- !ruby/object:RDoc::RI::MethodSummary 
  name: service_actions
- !ruby/object:RDoc::RI::MethodSummary 
  name: service_title
name: Service
superclass: Object
